export function none(..._: unknown[]) {
  _.length.toString();
}

export function isClass(obj: unknown, strict: boolean = true): obj is new (...args: unknown[]) => unknown {
  if (typeof obj !== 'function') return false;

  const str = obj.toString();

  // async function or arrow function
  if (obj.prototype === undefined) return false;
  // generator function or malformed definition
  if (obj.prototype.constructor !== obj) return false;
  // ES6 class
  if (str.slice(0, 5) === 'class') return true;
  // has own prototype properties
  if (Object.getOwnPropertyNames(obj.prototype).length >= 2) return true;
  // anonymous function
  if (/^function\s+\(|^function\s+anonymous\(/.test(str)) return false;
  // ES5 class without `this` in the body and the name's first character
  // upper-cased.
  if (strict && /^function\s+[A-Z]/.test(str)) return true;
  // has `this` in the body
  if (!/\b\(this\b|\bthis[.[]\b/.test(str)) return false;
  // not strict or ES5 class generated by babel
  if (!strict || /classCallCheck\(this/.test(str)) return true;
  return /^function\sdefault_\d+\s*\(/.test(str);
}

export function stringRightSplit(str: string, key: string): string {
  const index = str.indexOf(key);
  return str.slice(index + key.length);
}

export function stringTemp(template: string, args: Record<string, string | number>) {
  const params = Object.assign(args, { break: '\n' });
  let templateString = template;
  Object.keys(params).forEach((param) => {
    if (typeof params[param] !== 'string') params[param] = String(params[param]);
    templateString = templateString.replaceAll(`%${param}%`, params[param] as string);
  });
  return templateString;
}

export function getUuid(): string {
  return 'xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {
    const r = Math.random() * 16;
    let v: number | string;
    if (char === 'x') {
      v = Math.floor(r);
    } else {
      v = (Math.floor(r) % 4) + 8;
    }
    return v.toString(16);
  });
}

export function getRandomInt(max: number, min: number = 0): number {
  const range = max - min + 1;
  const index = Math.floor(Math.random() * range);
  const result = min + index;
  return result;
}

export function parseArgs(command: string) {
  const args: string[] = [];
  let current = '';
  let inQuote = false;
  let quoteChar: null | string = null;
  let lastQuoteChar: null | string = null;
  for (let i = 0; i < command.length; i += 1) {
    let c = command[i];
    if (inQuote) {
      if (c === quoteChar) {
        inQuote = false;
        quoteChar = null;
      } else if (c === '\\' && i + 1 < command.length) {
        i += 1;
        c = command[i];
        if (c === '"' || c === "'") {
          current += c;
        } else {
          current += `\\${c}`;
        }
      } else {
        current += c;
      }
    } else if (c === '"' || c === "'") {
      inQuote = true;
      quoteChar = c;
      lastQuoteChar = c;
    } else if (c === ' ' && current) {
      args.push(current);
      current = '';
    } else {
      current += c;
    }
  }
  if (inQuote || quoteChar) return { char: lastQuoteChar!, index: command.lastIndexOf(lastQuoteChar!)! };
  if (current) args.push(current);
  return args;
}
