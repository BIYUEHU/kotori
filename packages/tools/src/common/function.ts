export function none(..._: unknown[]) {
  _.length.toString()
}

export function isClass(obj: unknown, strict = true): obj is new (...args: unknown[]) => unknown {
  if (typeof obj !== 'function') return false

  const str = obj.toString()

  // async function or arrow function
  if (obj.prototype === undefined) return false
  // generator function or malformed definition
  if (obj.prototype.constructor !== obj) return false
  // ES6 class
  if (str.slice(0, 5) === 'class') return true
  // has own prototype properties
  if (Object.getOwnPropertyNames(obj.prototype).length >= 2) return true
  // anonymous function
  if (/^function\s+\(|^function\s+anonymous\(/.test(str)) return false
  // ES5 class without `this` in the body and the name's first character
  // upper-cased.
  if (strict && /^function\s+[A-Z]/.test(str)) return true
  // has `this` in the body
  if (!/\b\(this\b|\bthis[.[]\b/.test(str)) return false
  // not strict or ES5 class generated by babel
  if (!strict || /classCallCheck\(this/.test(str)) return true
  return /^function\sdefault_\d+\s*\(/.test(str)
}

export function regExpExecAll(regExp: RegExp, input: string) {
  if (!regExp.global) return regExp.exec(input)
  const arr: RegExpMatchArray[] = []
  let res = regExp.exec(input)
  while (res) {
    arr.push(res)
    res = regExp.exec(input)
  }
  return arr.length === 0 ? null : arr
}

export function stringTemp(template: string, args: Record<string, string | number>) {
  const params = Object.assign(args, { break: '\n' })
  let templateString = template
  for (const param of Object.keys(params)) {
    if (typeof params[param] !== 'string') params[param] = String(params[param])
    templateString = templateString.replaceAll(`%${param}%`, params[param] as string)
  }
  return templateString
}

export function stringFormat(template: string, args: (string | number)[]) {
  let str = template
  args.forEach((value, index) => {
    str = str.replaceAll(`{${index}}`, String(value))
  })
  return str
}

export function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(() => resolve(ms), ms))
}
